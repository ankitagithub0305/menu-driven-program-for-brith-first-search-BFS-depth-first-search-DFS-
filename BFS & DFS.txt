// menu driven program for brith first search(BFS)& depth first search(DFS)//

# include<stdio.h>
# define MAX 5
 void BFS_search(int adj[][MAX],int visited[],int start)
 {
     int queue[MAX],rear=-1,front=-1, i,k;
     
     for(k=0;k<MAX;k++)
         visited[k]=0;
         
     queue[++rear]=start;
     ++front;
     visited[start]=1;
     
     
     while(rear>=front)
     {
         start=queue[front++];
         printf("%c-",start+65);
         for(i=0;i<MAX;i++)
         {
             if(adj[start][i]&&visited[i]==0)
             {
                 queue[++rear]=i;
                 visited[i]=1;
             }
         }
     }
 }
 void DFS_search(int adj[][MAX],int visited[],int start)
 {
     int stack[MAX];
     int top=-1,i,k;
     for(k=0;k<MAX;k++)
     visited[k]=0;
     stack[++top]=start;
     visited[start]=1;
     while(top!=-1)
     {
         start=stack[top--];
         printf("%c-",start+65);
         for(i=0;i<MAX;i++)
         {
             if(adj[start][i]&&visited[i]==0)
             {
                 stack[++top]=i;
                 visited[i]=1;
                 break;
             }
         }
     }
 }
 int main()
 {
     int visited[MAX]={0};
     int adj[MAX][MAX],i,j;
     int ch,size;
     do
     {
         printf("\n1.enter value in graphs\n2.BFS traversal\n3.DFS traversal\n4.Exit\n");
         printf("enter your choice:");
         scanf("%d",&ch);
         switch(ch)
         {
             case 1:printf("enter the adjacency matrix\n");
             for(i=0;i<MAX;i++)
             for(j=0;j<MAX;j++)
             scanf("%d",&adj[i][j]);
             break;
             
             case 2: printf("BFS traversal:");
             BFS_search(adj,visited,0);
             break;
             
             case 3: printf("DFS traversal:");
             DFS_search(adj,visited,0);
             break;
         }
     }
     while(ch!=4);
     //getch();
     return 0;
     }

